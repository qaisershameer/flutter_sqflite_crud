static Future _onCreate(Database db, int version) async {
  // Create the "users" table
  final sqlUsers = '''CREATE TABLE users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    email TEXT NOT NULL,
    usertype TEXT NOT NULL DEFAULT 'user',
    phone TEXT,
    address TEXT,
    email_verified_at TEXT,
    password TEXT NOT NULL,
    two_factor_secret TEXT,
    two_factor_recovery_codes TEXT,
    two_factor_confirmed_at TEXT,
    remember_token TEXT,
    current_team_id INTEGER,
    profile_photo_path TEXT,
    created_at TEXT,
    updated_at TEXT
  )''';
  await db.execute(sqlUsers);

  // Create the "area" table
  final sqlArea = '''CREATE TABLE area (
    areaId INTEGER PRIMARY KEY AUTOINCREMENT,
    areaTitle TEXT NOT NULL,
    uId INTEGER NOT NULL,
    created_at TEXT,
    updated_at TEXT,
    FOREIGN KEY (uId) REFERENCES users(id)
  )''';
  await db.execute(sqlArea);

  // Create the "currency" table
  final sqlCurrency = '''CREATE TABLE currency (
    currencyId INTEGER PRIMARY KEY AUTOINCREMENT,
    currencyTitle TEXT NOT NULL,
    uId INTEGER NOT NULL,
    created_at TEXT,
    updated_at TEXT,
    FOREIGN KEY (uId) REFERENCES users(id)
  )''';
  await db.execute(sqlCurrency);

  // Create the "acctype" table
  final sqlAccType = '''CREATE TABLE acctype (
    accTypeId INTEGER PRIMARY KEY AUTOINCREMENT,
    accTypeTitle TEXT NOT NULL,
    uId INTEGER NOT NULL,
    created_at TEXT,
    updated_at TEXT,
    FOREIGN KEY (uId) REFERENCES users(id)
  )''';
  await db.execute(sqlAccType);

  // Create the "books" table
  final sqlBooks = '''CREATE TABLE books (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    phone TEXT NOT NULL,
    guest TEXT NOT NULL,
    time TEXT NOT NULL,
    date TEXT NOT NULL,
    note TEXT NOT NULL,
    status TEXT NOT NULL DEFAULT 'Pending',
    created_at TEXT,
    updated_at TEXT
  )''';
  await db.execute(sqlBooks);

  // Create the "cache" table
  final sqlCache = '''CREATE TABLE cache (
    key TEXT PRIMARY KEY,
    value TEXT NOT NULL,
    expiration INTEGER NOT NULL
  )''';
  await db.execute(sqlCache);

  // Create the "cache_locks" table
  final sqlCacheLocks = '''CREATE TABLE cache_locks (
    key TEXT PRIMARY KEY,
    owner TEXT NOT NULL,
    expiration INTEGER NOT NULL
  )''';
  await db.execute(sqlCacheLocks);

  // Create the "carts" table
  final sqlCarts = '''CREATE TABLE carts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT,
    detail TEXT,
    image TEXT,
    price REAL NOT NULL DEFAULT 0,
    userid TEXT,
    qty REAL NOT NULL DEFAULT 0,
    created_at TEXT,
    updated_at TEXT
  )''';
  await db.execute(sqlCarts);

  // Create the "accparent" table
  final sqlAccParent = '''CREATE TABLE accparent (
    parentId INTEGER PRIMARY KEY AUTOINCREMENT,
    accParentTitle TEXT NOT NULL,
    accTypeId INTEGER NOT NULL,
    uId INTEGER NOT NULL,
    created_at TEXT,
    updated_at TEXT,
    FOREIGN KEY (accTypeId) REFERENCES acctype(accTypeId),
    FOREIGN KEY (uId) REFERENCES users(id)
  )''';
  await db.execute(sqlAccParent);

  // Create the "failed_jobs" table
  final sqlFailedJobs = '''CREATE TABLE failed_jobs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    uuid TEXT NOT NULL,
    connection TEXT NOT NULL,
    queue TEXT NOT NULL,
    payload TEXT NOT NULL,
    exception TEXT NOT NULL,
    failed_at TEXT NOT NULL
  )''';
  await db.execute(sqlFailedJobs);

  // Create the "food" table
  final sqlFood = '''CREATE TABLE food (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT,
    detail TEXT,
    price REAL NOT NULL DEFAULT 0,
    image TEXT,
    created_at TEXT,
    updated_at TEXT
  )''';
  await db.execute(sqlFood);

  // Create the "job_batches" table
  final sqlJobBatches = '''CREATE TABLE job_batches (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    total_jobs INTEGER NOT NULL,
    pending_jobs INTEGER NOT NULL,
    failed_jobs INTEGER NOT NULL,
    failed_job_ids TEXT NOT NULL,
    options TEXT,
    cancelled_at INTEGER,
    created_at INTEGER NOT NULL,
    finished_at INTEGER
  )''';
  await db.execute(sqlJobBatches);

  // Create the "jobs" table
  final sqlJobs = '''CREATE TABLE jobs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    queue TEXT NOT NULL,
    payload TEXT NOT NULL,
    attempts INTEGER NOT NULL,
    reserved_at INTEGER,
    available_at INTEGER NOT NULL,
    created_at INTEGER NOT NULL
  )''';
  await db.execute(sqlJobs);

  // Create the "migrations" table
  final sqlMigrations = '''CREATE TABLE migrations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    migration TEXT NOT NULL,
    batch INTEGER NOT NULL
  )''';
  await db.execute(sqlMigrations);

  // Create the "orders" table
  final sqlOrders = '''CREATE TABLE orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    email TEXT,
    address TEXT,
    phone TEXT,
    title TEXT,
    qty TEXT,
    price TEXT,
    image TEXT,
    delivery_status TEXT NOT NULL DEFAULT 'In Progress',
    created_at TEXT,
    updated_at TEXT
  )''';
  await db.execute(sqlOrders);

  // Create the "password_reset_tokens" table
  final sqlPasswordResetTokens = '''CREATE TABLE password_reset_tokens (
    email TEXT NOT NULL PRIMARY KEY,
    token TEXT NOT NULL,
    created_at TEXT
  )''';
  await db.execute(sqlPasswordResetTokens);

  // Create the "personal_access_tokens" table
  final sqlPersonalAccessTokens = '''CREATE TABLE personal_access_tokens (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    tokenable_type TEXT NOT NULL,
    tokenable_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    token TEXT NOT NULL,
    abilities TEXT,
    last_used_at TEXT,
    expires_at TEXT,
    created_at TEXT,
    updated_at TEXT
  )''';
  await db.execute(sqlPersonalAccessTokens);

  // Create the "sessions" table
  final sqlSessions = '''CREATE TABLE sessions (
    id TEXT PRIMARY KEY,
    user_id INTEGER,
    ip_address TEXT,
    user_agent TEXT,
    payload TEXT NOT NULL,
    last_activity INTEGER NOT NULL
  )''';
  await db.execute(sqlSessions);

  // Create the "accounts" table
  final sqlAccounts = '''CREATE TABLE accounts (
    acId INTEGER PRIMARY KEY AUTOINCREMENT,
    acTitle TEXT NOT NULL,
    email TEXT,
    mobile TEXT,
    openingBal REAL NOT NULL DEFAULT 0,
    CurrentBal REAL NOT NULL DEFAULT 0,
    uId INTEGER NOT NULL,
    currencyId INTEGER NOT NULL,
    accTypeId INTEGER NOT NULL,
    parentId INTEGER NOT NULL,
    areaId INTEGER,
    created_at TEXT,
    updated_at TEXT,
    FOREIGN KEY (accTypeId) REFERENCES acctype(accTypeId),
    FOREIGN KEY (areaId) REFERENCES area(areaId),
    FOREIGN KEY (currencyId) REFERENCES currency(currencyId),
    FOREIGN KEY (parentId) REFERENCES accparent(parentId),
    FOREIGN KEY (uId) REFERENCES users(id)
  )''';
  await db.execute(sqlAccounts);

  // Create the "vouchers" table
  final sqlVouchers = '''CREATE TABLE vouchers (
    voucherId INTEGER PRIMARY KEY AUTOINCREMENT,
    voucherDate TEXT NOT NULL,
    voucherPrefix TEXT NOT NULL,
    remarks TEXT,
    drAcId INTEGER,
    crAcId INTEGER,
    debit REAL NOT NULL DEFAULT 0,
    credit REAL NOT NULL DEFAULT 0,
    debitSR REAL NOT NULL DEFAULT 0,
    creditSR REAL NOT NULL DEFAULT 0,
    uId INTEGER NOT NULL,
    created_at TEXT,
    updated_at TEXT,
    FOREIGN KEY (crAcId) REFERENCES accounts(acId),
    FOREIGN KEY (drAcId) REFERENCES accounts(acId),
    FOREIGN KEY (uId) REFERENCES users(id)
  )''';
  await db.execute(sqlVouchers);
}

Explanation of the Tables:
users: Stores user details such as id, name, email, usertype, phone, address, and other authentication-related fields.
area: Stores area information with a reference to the users table.
currency: Stores currency information with a reference to the users table.
acctype: Stores account type information with a reference to the users table.
books: Stores booking information, including phone, guest, time, status, and created_at.
cache: Stores cache data with key, value, and expiration.
cache_locks: Stores cache lock data with key, owner, and expiration.
carts: Stores shopping cart information with title, detail, price, userid, and qty.
accparent: Stores parent account information, related